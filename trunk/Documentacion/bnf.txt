=======================================
Gramática Inicial
=======================================

ExprReg -> ExprReg "|" Concat
ExprReg -> Concat

Concat -> Concat Grupo
Concat -> Grupo

Grupo  -> Elem Oper
Grupo  -> Elem

Elem   -> "(" ExprReg ")"
Elem   -> SimLen

Oper   -> "*"
Oper   -> "+"
Oper   -> "?"

SimLen -> simbolos_del_alfabeto

=======================================
Eliminación de Recursividad
=======================================

ExprReg -> Concat R1
R1     -> "|" Concat R1 | €

Concat -> Grupo R2
R2     -> Grupo R2 | €

Grupo  -> Elem Oper
Grupo  -> Elem

Elem   -> "(" ExprReg ")"
Elem   -> SimLen

Oper   -> "*"
Oper   -> "+"
Oper   -> "?"

SimLen -> simbolos_del_alfabeto

=======================================
Factorización
=======================================

ExprReg -> Concat R1
R1     -> "|" Concat R1 | €

Concat -> Grupo R2
R2     -> Grupo R2 | €

Grupo  -> Elem R3
R3     -> Oper | €

Elem   -> "(" ExprReg ")"
Elem   -> SimLen

Oper   -> "*"
Oper   -> "+"
Oper   -> "?"

SimLen -> simbolos_del_alfabeto

=======================================
Esquema de traducción a postfijo
=======================================

ExprReg -> Concat R1
R1     -> "|" Concat {print "|"} R1
R1     -> €

Concat -> Grupo R2
R2     -> Grupo {print "#"} R2
R2     -> €

Grupo  -> Elem R3
R3     -> Oper
R3     -> €

Elem   -> "(" ExprReg ")"
Elem   -> SimLen

Oper   -> "*" {print "*"}
Oper   -> "+" {print "+"}
Oper   -> "?" {print "?"}

SimLen -> simbolos_del_alfabeto {print "simbolo"}

=======================================
Esquema de traducción a AFN
=======================================

ExprReg -> Concat R1    {
                            if (R1.afn == null) ExprReg.afn = Concat.afn
                            else ExprReg.afn = Thompson_union(Concat.afn, R1.afn)
                        }
R1     -> "|" Concat R1'{
                            if (R1'.afn == null) ExprReg.afn = Concat.afn
                            else ExprReg.afn = Thompson_union(Concat.afn, R1'.afn)
                        }
R1     -> € {R1.afn = null}


Concat -> Grupo R2  {
                        if (R2.afn == null) Concat.afn = Grupo.afn
                        else Concat.afn = Thompson_concatenacion(Grupo.afn, R2.afn)
                    }
R2     -> Grupo R2' {
                        if (R2'.afn == null) R2.afn = Grupo.afn
                        else R2.afn = Thompson_concatenacion(Grupo.afn, R2'.afn)
                    }
R2     -> € {R2.afn = null}


Grupo  -> Elem Oper {
                        case (Oper.operador)
                            '*': Grupo.afn = Thompson_cerraduraKleene(Elem.afn)
                            '+': Grupo.afn = Thompson_cerraduraPositiva(Elem.afn)
                            '?': Grupo.afn = Thompson_opcion(Elem.afn)
                            '' : Grupo.afn = Elem.afn
                        end
                    }


Elem   -> "(" ExprReg ")"   {Elem.afn = ExprReg.afn}
Elem   -> SimLen            {Elem.afn = SimLen.afn}


Oper   -> "*" {Oper.operador = '*'}
Oper   -> "+" {Oper.operador = '+'}
Oper   -> "?" {Oper.operador = '?'}
Oper   -> €   {Oper.operador = ''}

SimLen -> simbolos_del_alfabeto {SimLen.afn = Thompson_basico("simbolo")}
